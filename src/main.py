# Import general libraries (needed for functions)
import numpy as np
import matplotlib.pyplot as plt
import warnings # Import the warnings module

# Import Qiskit classes
import qiskit
from qiskit_aer import AerSimulator
from qiskit_aer.noise import NoiseModel, depolarizing_error

# Import the RB Experiment and Analysis from qiskit_experiments
from qiskit_experiments.library import StandardRB
from qiskit_experiments.framework import ExperimentData # Added for type hint if needed

# --- Parameters ---
lengths = [1, 10, 20, 50, 75, 100, 125, 150, 175, 200]
num_samples = 5
physical_qubits = (0, 1)
shots_per_circuit = 200

# --- Noise Model Setup ---
noise_model = NoiseModel()
p1Q = 0.002
p2Q = 0.01

noise_model.add_all_qubit_quantum_error(depolarizing_error(p1Q, 1), ['sx', 'x'])
noise_model.add_all_qubit_quantum_error(depolarizing_error(p1Q, 1), ['u2'])
noise_model.add_all_qubit_quantum_error(depolarizing_error(2 * p1Q, 1), ['u3'])
noise_model.add_all_qubit_quantum_error(depolarizing_error(p2Q, 2), ['cx'])

# --- Backend Setup ---
backend = AerSimulator(noise_model=noise_model)

print("Setting up StandardRB Experiment...")
rb_exp = StandardRB(
    physical_qubits=physical_qubits,
    lengths=lengths,
    num_samples=num_samples,
    seed=42
)

print(f"Running StandardRB on qubits {physical_qubits} with {num_samples} seeds and lengths up to {max(lengths)}.")

# --- Suppress the specific DeprecationWarning locally ---
with warnings.catch_warnings():
    # We want to ignore the specific DeprecationWarning about `dataframe` argument
    # This is a bit broad, but qiskit-experiments might not provide a more specific category
    warnings.filterwarnings(
        "ignore",
        category=DeprecationWarning,
        message=".*Leaving `dataframe` unset or setting it to `False` for `ExperimentData.analysis_results` is deprecated.*"
    )

    exp_data: ExperimentData = rb_exp.run(backend=backend, shots=shots_per_circuit)
    exp_data.block_for_results() # Wait for analysis to complete

    print("Experiment finished. Analyzing results...")

    # Access analysis results - these calls should now be covered by the warning filter
    analysis_results_list = exp_data.analysis_results(dataframe=False)

    print("\n--- RB Analysis Results (List Format) ---")
    if analysis_results_list:
        for result in analysis_results_list:
            print(f"  {result.name}: {result.value}")
            if hasattr(result, 'extra'):
                for key, val in result.extra.items():
                    print(f"    Extra - {key}: {val}")
    else:
        print("No analysis results found (list format).")

    # Plot the results
    print("\nDisplaying RB plot...")
    try:
        fig = exp_data.figure(0)
        if fig:
            plt.show()
        else:
            print("No figure generated by the experiment analysis (figure(0) returned None).")
    except Exception as e:
        print(f"Error generating/showing plot: {e}")

    # Get specific EPC result
    epc_result_data = exp_data.analysis_results("EPC", dataframe=False)

# --- End of warning suppression block ---

if epc_result_data: # Check if epc_result_data was successfully assigned
    epc_value = epc_result_data.value.nominal_value
    epc_stderr = epc_result_data.value.std_dev
    print(f"\nError Per Clifford (EPC): {epc_value:.4e} \u00B1 {epc_stderr:.4e}")
else:
    print("EPC result not found via direct key access.")

print("\nScript finished.")